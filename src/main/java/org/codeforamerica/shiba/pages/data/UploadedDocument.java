package org.codeforamerica.shiba.pages.data;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.ToString;
import lombok.extern.slf4j.Slf4j;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;
import org.codeforamerica.shiba.Utils;
import org.codeforamerica.shiba.application.Application;
import org.codeforamerica.shiba.documents.DocumentRepositoryService;
import org.codeforamerica.shiba.output.ApplicationFile;
import org.codeforamerica.shiba.output.caf.FileNameGenerator;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.Serializable;
import java.util.List;

@AllArgsConstructor
@Data
@Slf4j
@ToString(exclude = {"dataURL"})
public class UploadedDocument implements Serializable {
    private static final List<String> IMAGE_TYPES_TO_CONVERT_TO_PDF = List.of("jpg", "jpeg", "png", "gif");

    private String filename;
    private String s3Filepath;
    private String dataURL; // thumbnail image as a string, generated by dropzone
    private String type;
    private long size;

    public ApplicationFile fileToSend(Application application, Integer index, DocumentRepositoryService documentRepositoryService, FileNameGenerator fileNameGenerator) {
        var fileBytes = documentRepositoryService.get(this.getS3Filepath());
        var extension = Utils.getFileType(this.getFilename());
        if (IMAGE_TYPES_TO_CONVERT_TO_PDF.contains(extension)) {
            try {
                fileBytes = convertImageToPdf(fileBytes);
                extension = "pdf";
            } catch (IOException e) {
                log.error("failed to convert document " + this.getFilename() + " to pdf. Maintaining original type");
            }
        }
        String filename = fileNameGenerator.generateUploadedDocumentName(application, index, extension);
        return new ApplicationFile(fileBytes, filename);
    }

    private byte[] convertImageToPdf(byte[] imageFileBytes) throws IOException {
        try (PDDocument doc = new PDDocument(); ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            var image = PDImageXObject.createFromByteArray(doc, imageFileBytes, this.getFilename());
            var pageSize = PDRectangle.LETTER;
            var originalWidth = image.getWidth();
            var originalHeight = image.getHeight();
            var pageWidth = pageSize.getWidth();
            var pageHeight = pageSize.getHeight();
            var ratio = Math.min(pageWidth / originalWidth, pageHeight / originalHeight);
            var scaledWidth = originalWidth * ratio;
            var scaledHeight = originalHeight * ratio;
            var x = (pageWidth - scaledWidth) / 2;
            var y = (pageHeight - scaledHeight) / 2;
            var page = new PDPage(pageSize);
            doc.addPage(page);

            try (PDPageContentStream pdfContents = new PDPageContentStream(doc, page)) {
                pdfContents.drawImage(image, x, y, scaledWidth, scaledHeight);
            }

            doc.save(outputStream);
            return outputStream.toByteArray();
        }
    }
}
